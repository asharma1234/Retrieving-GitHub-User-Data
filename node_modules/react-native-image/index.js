import React, { PropTypes } from 'react';
import { Image as RNImage, Platform } from 'react-native';

class Image extends RNImage {
  static propTypes = {
    ...RNImage.propTypes,
    source: PropTypes.oneOfType([
      PropTypes.shape({
        uri: PropTypes.string,
        width: PropTypes.number,
        height: PropTypes.number,
        scale: PropTypes.number,
      }),
      PropTypes.string,
      PropTypes.number,
    ]),
    defaultSource: PropTypes.oneOfType([
      PropTypes.shape({
        uri: PropTypes.string,
        width: PropTypes.number,
        height: PropTypes.number,
        scale: PropTypes.number,
      }),
      PropTypes.string,
      PropTypes.number,
    ]),
  };
  render() {
    const defaultSource = getSource(this.props.defaultSource);
    const { source } = this.props;
    const props = {
      ...this.props,
      defaultSource,
      source: source ? getSource(source) : defaultSource,
    }; 
    return <RNImage {...props} />;
  }
}

class AndroidImage extends RNImage {
  static propTypes = Image.propTypes;
  constructor(props) {
    super(props);
    const { source } = props;
    const isAssetSource = typeof source === 'number';
    this.state = {
      source: isAssetSource ? source : null,
    };
    this.pendingSource = source;
    if (source && !isAssetSource)
      this.load(props.source);
  }
  componentWillReceiveProps(props) {
    const { source } = props;
    if (source && 
      (this.pendingSource != source || this.state.source != source))
      this.load(source);
  }
  shouldComponentUpdate(state) {
    return this.state !== state;
  }
  async load(source) {
    const typeofSource = typeof source;
    if (typeofSource === 'number') {
      this.setState(source);
      return;
    } else if (typeofSource === 'object') {
      source = source.uri;
    }
    if (typeof source !== 'string') {
      return;
    }
    this.pendingSource = source;
    await RNImage.prefetch(source);
    if (this.pendingSource === source) {
      this.setState({ source });
    }
  }
  render() {
    const defaultSource = getSource(this.props.defaultSource);
    const { source } = this.state;
    const props = {
      ...this.props,
      fadeDuration: 0,
      source: source ? getSource(source) : defaultSource,
    };
    return <RNImage {...props} />;
  }
}

function getSource(source) {
  switch (typeof source) {
    case 'number':
    case 'object':
      return source;
    case 'string':
      if (!/^(https?|file):\/\//.test(source)) {
        return undefined;
      }
      return { uri: source };
  }
}

export default Platform.OS === 'ios' ? Image : AndroidImage;
